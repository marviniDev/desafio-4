#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Automa√ß√£o da compra de VR/VA
Sistema para automatizar o processo mensal de compra de Vale Refei√ß√£o
"""

import pandas as pd
import numpy as np
from datetime import datetime, date, timedelta
import warnings
import calendar
from config import *
warnings.filterwarnings('ignore')

class AutomacaoVR:
    def __init__(self, periodo_personalizado=None):
        """
        Inicializa a automa√ß√£o com per√≠odo configur√°vel
        
        Args:
            periodo_personalizado (dict): Dicion√°rio com 'inicio', 'fim', 'mes_competencia'
        """
        if periodo_personalizado:
            self.periodo = periodo_personalizado
        else:
            self.periodo = PERIODO_REFERENCIA
        
        # Converter strings de data para objetos datetime
        self.data_inicio = datetime.strptime(self.periodo['inicio'], '%d/%m/%Y')
        self.data_fim = datetime.strptime(self.periodo['fim'], '%d/%m/%Y')
        self.mes_competencia = self.periodo['mes_competencia']
        self.ano = self.periodo['ano']
        self.mes = self.periodo['mes']
        
        # Inicializar logs de valida√ß√£o ANTES de chamar os m√©todos
        self.logs_validacao = []
        self.alertas = []
        
        # Validar per√≠odo de execu√ß√£o
        self.validar_periodo_execucao()
        
        # Calcular dias √∫teis do per√≠odo
        self.dias_uteis_periodo = self.calcular_dias_uteis_periodo()
        
    def validar_periodo_execucao(self):
        """Valida se a execu√ß√£o est√° no per√≠odo correto"""
        hoje = datetime.now()
        dia_atual = hoje.day
        
        if EXECUCAO['alerta_execucao_fora_periodo']:
            # Verificar se est√° dentro do per√≠odo recomendado
            dentro_periodo = (
                dia_atual >= EXECUCAO['periodo_execucao_inicio'] and 
                dia_atual <= EXECUCAO['periodo_execucao_fim']
            )
            
            # Verificar se est√° dentro da toler√¢ncia
            tolerancia_inicio = EXECUCAO['periodo_execucao_inicio'] - EXECUCAO['tolerancia_dias']
            tolerancia_fim = EXECUCAO['periodo_execucao_fim'] + EXECUCAO['tolerancia_dias']
            
            dentro_tolerancia = (
                dia_atual >= tolerancia_inicio and 
                dia_atual <= tolerancia_fim
            )
            
            if not dentro_periodo:
                if EXECUCAO['bloquear_execucao_fora_periodo']:
                    # Bloquear execu√ß√£o
                    raise ValueError(EXECUCAO['mensagem_bloqueio'])
                else:
                    # Apenas alertar
                    if dentro_tolerancia:
                        self.alertas.append(
                            f"‚ö†Ô∏è ALERTA: Execu√ß√£o pr√≥xima ao limite do per√≠odo recomendado. "
                            f"Per√≠odo: {EXECUCAO['periodo_execucao_inicio']}-{EXECUCAO['periodo_execucao_fim']}, "
                            f"Hoje: {dia_atual}"
                        )
                    else:
                        self.alertas.append(
                            f"üö® ALERTA CR√çTICO: Execu√ß√£o fora do per√≠odo recomendado. "
                            f"Per√≠odo: {EXECUCAO['periodo_execucao_inicio']}-{EXECUCAO['periodo_execucao_fim']}, "
                            f"Hoje: {dia_atual}. "
                            f"Recomenda-se executar dentro do per√≠odo para garantir consist√™ncia dos dados."
                        )
            else:
                self.logs_validacao.append(
                    f"‚úÖ Execu√ß√£o no per√≠odo recomendado: dia {dia_atual}"
                )
    
    def calcular_dias_uteis_periodo(self):
        """Calcula dias √∫teis do per√≠odo considerando feriados"""
        dias_uteis = 0
        data_atual = self.data_inicio
        
        while data_atual <= self.data_fim:
            # Verificar se √© dia √∫til (n√£o √© fim de semana)
            if data_atual.weekday() < 5:  # 0=Segunda, 4=Sexta
                # Verificar se n√£o √© feriado nacional
                data_str = data_atual.strftime('%d/%m/%Y')
                if data_str not in FERIADOS_2025['nacionais']:
                    dias_uteis += 1
            
            data_atual += timedelta(days=1)
        
        return dias_uteis
        
    def carregar_dados(self):
        """Carrega todas as planilhas de dados"""
        print("Carregando dados das planilhas...")
        
        try:
            # Carregar planilhas principais
            self.ativos = pd.read_excel(ARQUIVOS_ENTRADA['ativos'])
            self.ferias = pd.read_excel(ARQUIVOS_ENTRADA['ferias'])
            self.desligados = pd.read_excel(ARQUIVOS_ENTRADA['desligados'])
            self.estagio = pd.read_excel(ARQUIVOS_ENTRADA['estagio'])
            self.aprendiz = pd.read_excel(ARQUIVOS_ENTRADA['aprendiz'])
            self.afastamentos = pd.read_excel(ARQUIVOS_ENTRADA['afastamentos'])
            self.exterior = pd.read_excel(ARQUIVOS_ENTRADA['exterior'])
            self.admissao_abril = pd.read_excel(ARQUIVOS_ENTRADA['admissao'])
            self.base_sindicato = pd.read_excel(ARQUIVOS_ENTRADA['sindicato_valor'])
            self.base_dias_uteis = pd.read_excel(ARQUIVOS_ENTRADA['dias_uteis'])
            
            # Validar consist√™ncia temporal das bases
            self.validar_consistencia_temporal()
            
            print("‚úì Dados carregados com sucesso")
            return True
            
        except Exception as e:
            print(f"‚úó Erro ao carregar dados: {e}")
            return False
    
    def validar_consistencia_temporal(self):
        """Valida se as bases est√£o alinhadas temporalmente"""
        if not TRATAMENTO_DADOS['validar_consistencia_temporal']:
            return
            
        print("Validando consist√™ncia temporal das bases...")
        
        # Verificar se base dias √∫teis est√° no per√≠odo correto
        if 'BASE DIAS UTEIS DE 15/04 a 15/05' in self.base_dias_uteis.columns:
            self.logs_validacao.append("‚úì Base dias √∫teis: Per√≠odo 15/04 a 15/05 (OK)")
        else:
            self.alertas.append("‚ö†Ô∏è Base dias √∫teis: Per√≠odo n√£o identificado")
        
        # Verificar se desligados est√£o no m√™s de compet√™ncia
        if 'DATA DEMISS√ÉO' in self.desligados.columns:
            datas_desligamento = pd.to_datetime(self.desligados['DATA DEMISS√ÉO'], errors='coerce')
            datas_validas = datas_desligamento.dropna()
            if len(datas_validas) > 0:
                mes_desligamento = datas_validas.dt.month.iloc[0]
                if mes_desligamento == self.mes:
                    self.logs_validacao.append(f"‚úì Base desligados: M√™s {self.mes} (OK)")
                else:
                    self.alertas.append(f"‚ö†Ô∏è Base desligados: M√™s {mes_desligamento} diferente do esperado {self.mes}")
        
        # Verificar se admiss√µes est√£o no per√≠odo correto
        if 'Admiss√£o' in self.admissao_abril.columns:
            self.logs_validacao.append("‚úì Base admiss√£o: Abril (OK)")
        
        print("‚úì Consist√™ncia temporal validada")
    
    def limpar_colunas(self):
        """Limpa e padroniza as colunas das planilhas"""
        print("Limpando e padronizando colunas...")
        
        # Limpar colunas da base sindicato
        self.base_sindicato.columns = ['ESTADO', 'VALOR']
        self.base_sindicato['ESTADO'] = self.base_sindicato['ESTADO'].str.strip()
        
        # Limpar colunas da base dias √∫teis
        self.base_dias_uteis.columns = ['SINDICATO', 'DIAS_UTEIS']
        self.base_dias_uteis['SINDICATO'] = self.base_dias_uteis['SINDICATO'].str.strip()
        
        # Padronizar colunas de matr√≠cula
        for df_name in ['ativos', 'ferias', 'desligados', 'estagio', 'aprendiz', 'afastamentos', 'exterior', 'admissao_abril']:
            df = getattr(self, df_name)
            if 'MATRICULA' in df.columns:
                df['MATRICULA'] = df['MATRICULA'].astype(str).str.strip()
            elif 'MATRICULA ' in df.columns:  # Para desligados que tem espa√ßo extra
                df['MATRICULA'] = df['MATRICULA '].astype(str).str.strip()
                df.drop('MATRICULA ', axis=1, inplace=True)
        
        print("‚úì Colunas limpas e padronizadas")
    
    def aplicar_filtros_exclusao(self):
        """Aplica filtros de exclus√£o conforme regras do neg√≥cio"""
        print("Aplicando filtros de exclus√£o...")
        
        # Lista de matr√≠culas a serem exclu√≠das
        matriculas_excluir = set()
        
        # 1. Estagi√°rios
        if 'MATRICULA' in self.estagio.columns:
            matriculas_excluir.update(self.estagio['MATRICULA'].astype(str).tolist())
        
        # 2. Aprendizes
        if 'MATRICULA' in self.aprendiz.columns:
            matriculas_excluir.update(self.aprendiz['MATRICULA'].astype(str).tolist())
        
        # 3. Profissionais no exterior (CORRIGIDO: n√£o excluir automaticamente)
        if 'MATRICULA' in self.exterior.columns:
            # Verificar se h√° retornos do exterior
            if 'Unnamed: 2' in self.exterior.columns:
                retornos = self.exterior[self.exterior['Unnamed: 2'].str.contains('RETORNOU', na=False)]
                if len(retornos) > 0:
                    self.logs_validacao.append(f"‚ö†Ô∏è {len(retornos)} colaboradores retornaram do exterior")
                    # N√£o excluir automaticamente, tratar individualmente
                else:
                    # Excluir apenas se n√£o retornaram
                    matriculas_excluir.update(self.exterior['MATRICULA'].astype(str).tolist())
            else:
                matriculas_excluir.update(self.exterior['MATRICULA'].astype(str).tolist())
        
        # 4. Afastados (CORRIGIDO: verificar datas de retorno)
        if 'MATRICULA' in self.afastamentos.columns:
            # Verificar se h√° datas de retorno
            if 'Unnamed: 3' in self.afastamentos.columns:
                afastados_sem_retorno = self.afastamentos[
                    self.afastamentos['Unnamed: 3'].isna() | 
                    (self.afastamentos['Unnamed: 3'] == '')
                ]
                afastados_com_retorno = self.afastamentos[
                    self.afastamentos['Unnamed: 3'].notna() & 
                    (self.afastamentos['Unnamed: 3'] != '')
                ]
                
                # Excluir apenas afastados sem data de retorno
                matriculas_excluir.update(afastados_sem_retorno['MATRICULA'].astype(str).tolist())
                
                if len(afastados_com_retorno) > 0:
                    self.logs_validacao.append(f"‚ö†Ô∏è {len(afastados_com_retorno)} afastados com data de retorno (n√£o exclu√≠dos)")
            else:
                # Se n√£o h√° coluna de retorno, excluir todos
                matriculas_excluir.update(self.afastamentos['MATRICULA'].astype(str).tolist())
        
        # 5. Diretores (cargos que cont√™m "diretor")
        diretores = self.ativos[self.ativos['TITULO DO CARGO'].str.contains('diretor', case=False, na=False)]
        matriculas_excluir.update(diretores['MATRICULA'].astype(str).tolist())
        
        # Aplicar exclus√µes na base de ativos
        self.ativos_filtrados = self.ativos[~self.ativos['MATRICULA'].astype(str).isin(matriculas_excluir)].copy()
        
        print(f"‚úì Filtros aplicados. Colaboradores restantes: {len(self.ativos_filtrados)}")
        return matriculas_excluir
    
    def calcular_dias_uteis_colaborador(self):
        """Calcula dias √∫teis por colaborador considerando f√©rias, afastamentos e desligamentos"""
        print("Calculando dias √∫teis por colaborador...")
        
        # Criar base consolidada
        self.base_consolidada = self.ativos_filtrados.copy()
        
        # Adicionar informa√ß√µes de f√©rias
        self.base_consolidada = self.base_consolidada.merge(
            self.ferias[['MATRICULA', 'DIAS DE F√âRIAS']], 
            on='MATRICULA', 
            how='left'
        )
        self.base_consolidada['DIAS DE F√âRIAS'] = self.base_consolidada['DIAS DE F√âRIAS'].fillna(0)
        
        # Adicionar informa√ß√µes de desligamento
        self.base_consolidada = self.base_consolidada.merge(
            self.desligados[['MATRICULA', 'DATA DEMISS√ÉO', 'COMUNICADO DE DESLIGAMENTO']], 
            on='MATRICULA', 
            how='left'
        )
        
        # Adicionar informa√ß√µes de admiss√£o
        self.base_consolidada = self.base_consolidada.merge(
            self.admissao_abril[['MATRICULA', 'Admiss√£o']], 
            on='MATRICULA', 
            how='left'
        )
        
        # Calcular dias √∫teis por colaborador
        self.base_consolidada['DIAS_UTEIS_COLABORADOR'] = self.dias_uteis_periodo
        
        # Ajustar para f√©rias (CORRIGIDO: implementar estrat√©gias inteligentes)
        if TRATAMENTO_DADOS['ferias_sem_periodo'] == 'validar_por_historico':
            # Estrat√©gia inteligente: validar por hist√≥rico e aplicar estrat√©gia conservadora
            self.aplicar_estrategia_ferias_inteligente()
        elif TRATAMENTO_DADOS['ferias_sem_periodo'] == 'assumir_periodo_consolidacao':
            # Estrat√©gia original: assumir per√≠odo de consolida√ß√£o
            self.base_consolidada['DIAS_UTEIS_COLABORADOR'] -= self.base_consolidada['DIAS DE F√âRIAS']
            self.logs_validacao.append("‚ö†Ô∏è F√©rias sem per√≠odo: Assumindo per√≠odo de consolida√ß√£o")
        else:
            # Outras estrat√©gias podem ser implementadas aqui
            pass
        
        # Ajustar para desligamentos (CORRIGIDO: tratar desligados sem comunicado)
        def ajustar_desligamento(row):
            if pd.notna(row['DATA DEMISS√ÉO']):
                data_desligamento = pd.to_datetime(row['DATA DEMISS√ÉO'])
                if data_desligamento.month == self.mes and data_desligamento.year == self.ano:
                    # Verificar se tem comunicado
                    if pd.notna(row['COMUNICADO DE DESLIGAMENTO']) and row['COMUNICADO DE DESLIGAMENTO'] == 'OK':
                        # Comunicado confirmado
                        if data_desligamento.day <= DIA_LIMITE_DESLIGAMENTO:
                            return 0  # N√£o considerar para pagamento
                        else:
                            # Calcular proporcional
                            dias_ate_desligamento = data_desligamento.day
                            return max(0, dias_ate_desligamento - DIA_LIMITE_DESLIGAMENTO)
                    else:
                        # Sem comunicado - aplicar estrat√©gia configurada
                        if TRATAMENTO_DADOS['desligados_sem_comunicado'] == 'incluir_com_cautela':
                            # Incluir com dias reduzidos (estrat√©gia conservadora)
                            dias_ate_desligamento = data_desligamento.day
                            return max(0, dias_ate_desligamento - DIA_LIMITE_DESLIGAMENTO)
                        elif TRATAMENTO_DADOS['desligados_sem_comunicado'] == 'excluir_automaticamente':
                            return 0
                        else:
                            # Incluir normalmente (estrat√©gia padr√£o)
                            dias_ate_desligamento = data_desligamento.day
                            return max(0, dias_ate_desligamento - DIA_LIMITE_DESLIGAMENTO)
            return row['DIAS_UTEIS_COLABORADOR']
        
        self.base_consolidada['DIAS_UTEIS_COLABORADOR'] = self.base_consolidada.apply(ajustar_desligamento, axis=1)
        
        # Ajustar para admiss√µes no meio do per√≠odo (CORRIGIDO: implementar l√≥gica)
        def ajustar_admissao(row):
            if pd.notna(row['Admiss√£o']):
                try:
                    data_admissao = pd.to_datetime(row['Admiss√£o'])
                    if data_admissao.month == self.mes and data_admissao.year == self.ano:
                        # Admiss√£o no m√™s de compet√™ncia - calcular proporcional
                        dias_desde_admissao = self.dias_uteis_periodo - (data_admissao.day - 1)
                        return max(0, dias_desde_admissao)
                except:
                    pass
            return row['DIAS_UTEIS_COLABORADOR']
        
        self.base_consolidada['DIAS_UTEIS_COLABORADOR'] = self.base_consolidada.apply(ajustar_admissao, axis=1)
        
        # Garantir que n√£o h√° valores negativos
        self.base_consolidada['DIAS_UTEIS_COLABORADOR'] = self.base_consolidada['DIAS_UTEIS_COLABORADOR'].clip(lower=0)
        
        # Logs de valida√ß√£o
        total_dias_uteis = self.base_consolidada['DIAS_UTEIS_COLABORADOR'].sum()
        self.logs_validacao.append(f"‚úì Total de dias √∫teis calculados: {total_dias_uteis}")
        
        print("‚úì Dias √∫teis calculados para cada colaborador")
    
    def calcular_valor_vr(self):
        """Calcula o valor de VR para cada colaborador"""
        print("Calculando valores de VR...")
        
        # Mapear valores por sindicato (CORRIGIDO: mapeamento correto)
        mapeamento_sindicato = {}
        
        # Mapear base sindicato x valor
        for _, row in self.base_sindicato.iterrows():
            estado = row['ESTADO'].strip()
            valor = row['VALOR']
            if pd.notna(valor):  # Ignorar valores NaN
                mapeamento_sindicato[estado] = valor
        
        print(f"‚úì Mapeamento de valores por estado: {mapeamento_sindicato}")
        
        # Mapear base dias √∫teis (CORRIGIDO: usar corretamente)
        mapeamento_dias_uteis = {}
        for _, row in self.base_dias_uteis.iterrows():
            sindicato = row['SINDICATO'].strip()
            dias_uteis = row['DIAS_UTEIS']
            mapeamento_dias_uteis[sindicato] = dias_uteis
        
        # Aplicar valores por sindicato (CORRIGIDO: l√≥gica de mapeamento)
        def obter_valor_sindicato(sindicato):
            if pd.isna(sindicato):
                return VALOR_VR_PADRAO
            
            sindicato_str = str(sindicato).strip()
            
            # Mapeamento direto por estado
            for estado, valor in mapeamento_sindicato.items():
                if estado in sindicato_str:
                    return valor
            
            # Mapeamento por correspond√™ncia de siglas
            mapeamento_siglas = {
                'SP': 'S√£o Paulo',
                'RJ': 'Rio de Janeiro', 
                'RS': 'Rio Grande do Sul',
                'PR': 'Paran√°'
            }
            
            for sigla, estado in mapeamento_siglas.items():
                if sigla in sindicato_str and estado in mapeamento_sindicato:
                    return mapeamento_sindicato[estado]
            
            # Se n√£o encontrar, usar valor padr√£o
            return VALOR_VR_PADRAO
        
        self.base_consolidada['VALOR_DIARIO_VR'] = self.base_consolidada['Sindicato'].apply(obter_valor_sindicato)
        
        # Logs de valida√ß√£o dos valores aplicados
        valores_aplicados = self.base_consolidada['VALOR_DIARIO_VR'].value_counts().sort_index()
        self.logs_validacao.append(f"‚úì Valores di√°rios aplicados: {dict(valores_aplicados)}")
        
        # Aplicar dias √∫teis por sindicato (CORRIGIDO: implementar prioridade)
        def obter_dias_uteis_sindicato(sindicato):
            if pd.isna(sindicato):
                return self.dias_uteis_periodo
            
            sindicato_str = str(sindicato).strip()
            
            # Buscar por correspond√™ncia parcial na base de dias √∫teis
            for sind, dias in mapeamento_dias_uteis.items():
                if sind.lower() in sindicato_str.lower() or sindicato_str.lower() in sind.lower():
                    return dias
            
            return self.dias_uteis_periodo  # Usar dias √∫teis do per√≠odo se n√£o encontrar
        
        # Aplicar dias √∫teis do sindicato se configurado para priorizar
        if DIAS_UTEIS['prioridade_base_sindicato']:
            self.base_consolidada['DIAS_UTEIS_SINDICATO'] = self.base_consolidada['Sindicato'].apply(obter_dias_uteis_sindicato)
            
            # Recalcular dias √∫teis considerando o sindicato
            self.base_consolidada['DIAS_UTEIS_COLABORADOR'] = self.base_consolidada.apply(
                lambda row: min(row['DIAS_UTEIS_COLABORADOR'], row['DIAS_UTEIS_SINDICATO']), 
                axis=1
            )
            
            self.logs_validacao.append("‚úì Dias √∫teis ajustados conforme base do sindicato")
        
        # Calcular valor total de VR
        self.base_consolidada['VALOR_TOTAL_VR'] = (
            self.base_consolidada['DIAS_UTEIS_COLABORADOR'] * 
            self.base_consolidada['VALOR_DIARIO_VR']
        )
        
        # Calcular custo empresa (80%) e desconto profissional (20%)
        self.base_consolidada['CUSTO_EMPRESA'] = self.base_consolidada['VALOR_TOTAL_VR'] * PROPORCAO_EMPRESA
        self.base_consolidada['DESCONTO_PROFISSIONAL'] = self.base_consolidada['VALOR_TOTAL_VR'] * PROPORCAO_PROFISSIONAL
        
        # Logs de valida√ß√£o
        total_vr = self.base_consolidada['VALOR_TOTAL_VR'].sum()
        self.logs_validacao.append(f"‚úì Valor total de VR calculado: R$ {total_vr:,.2f}")
        
        print("‚úì Valores de VR calculados")
    
    def aplicar_estrategia_ferias_inteligente(self):
        """Aplica estrat√©gia inteligente para f√©rias sem per√≠odo espec√≠fico"""
        print("Aplicando estrat√©gia inteligente para f√©rias...")
        
        # Contadores para an√°lise
        total_colaboradores_ferias = len(self.base_consolidada[self.base_consolidada['DIAS DE F√âRIAS'] > 0])
        f√©rias_aplicadas = 0
        f√©rias_nao_aplicadas = 0
        
        for idx, row in self.base_consolidada.iterrows():
            if row['DIAS DE F√âRIAS'] > 0:
                dias_ferias = row['DIAS DE F√âRIAS']
                
                # Estrat√©gia conservadora: aplicar apenas uma parte das f√©rias
                if TRATAMENTO_DADOS['ferias_estrategia_conservadora']:
                    # Aplicar apenas 70% das f√©rias para ser conservador
                    dias_aplicar = int(dias_ferias * 0.7)
                    self.base_consolidada.at[idx, 'DIAS_UTEIS_COLABORADOR'] -= dias_aplicar
                    f√©rias_aplicadas += 1
                    
                    # Adicionar observa√ß√£o sobre estrat√©gia aplicada
                    if 'OBSERVACOES_FERIAS' not in self.base_consolidada.columns:
                        self.base_consolidada['OBSERVACOES_FERIAS'] = ''
                    
                    self.base_consolidada.at[idx, 'OBSERVACOES_FERIAS'] = (
                        f"F√©rias: {dias_ferias} dias, aplicados: {dias_aplicar} dias "
                        f"(estrat√©gia conservadora 70%)"
                    )
                else:
                    # Estrat√©gia padr√£o: aplicar todas as f√©rias
                    self.base_consolidada.at[idx, 'DIAS_UTEIS_COLABORADOR'] -= dias_ferias
                    f√©rias_aplicadas += 1
        
        # Logs de valida√ß√£o
        self.logs_validacao.append(
            f"‚úì Estrat√©gia inteligente de f√©rias aplicada: "
            f"{f√©rias_aplicadas} colaboradores processados"
        )
        
        if TRATAMENTO_DADOS['ferias_estrategia_conservadora']:
            self.logs_validacao.append(
                "‚ö†Ô∏è Estrat√©gia conservadora aplicada: 70% das f√©rias consideradas"
            )
        
        print("‚úì Estrat√©gia inteligente de f√©rias aplicada")
    
    def gerar_planilha_final(self):
        """Gera a planilha final para envio √† operadora"""
        print("Gerando planilha final...")
        
        # Selecionar colunas para a planilha final
        colunas_finais = [
            'MATRICULA',
            'Admiss√£o',
            'Sindicato',  # Adicionar sindicato do colaborador
            'DATA DEMISS√ÉO',
            'DIAS_UTEIS_COLABORADOR',
            'VALOR_DIARIO_VR',
            'VALOR_TOTAL_VR',
            'CUSTO_EMPRESA',
            'DESCONTO_PROFISSIONAL'
        ]
        
        # Adicionar coluna de observa√ß√µes de f√©rias se existir
        if 'OBSERVACOES_FERIAS' in self.base_consolidada.columns:
            colunas_finais.append('OBSERVACOES_FERIAS')
        
        # Criar planilha final
        self.planilha_final = self.base_consolidada[colunas_finais].copy()
        
        # Renomear colunas para o formato solicitado
        colunas_renomeadas = [
            'Matricula',
            'Admiss√£o',
            'Sindicato do Colaborador',  # Nome exato solicitado
            'Compet√™ncia',  # M√™s/ano de compet√™ncia
            'Dias',  # Dias √∫teis
            'VALOR DI√ÅRIO VR',  # Nome exato solicitado
            'TOTAL',  # Nome exato solicitado
            'Custo empresa',
            'Desconto profissional'
        ]
        
        # Adicionar coluna de observa√ß√µes de f√©rias se existir
        if 'OBSERVACOES_FERIAS' in self.planilha_final.columns:
            colunas_renomeadas.append('Observa√ß√µes F√©rias')
        
        self.planilha_final.columns = colunas_renomeadas
        
        # Adicionar coluna de compet√™ncia (m√™s/ano)
        self.planilha_final['Compet√™ncia'] = self.periodo['mes_competencia']
        
        # Adicionar coluna de observa√ß√µes gerais
        self.planilha_final['OBS GERAL'] = ''
        
        # Combinar observa√ß√µes de f√©rias com observa√ß√µes gerais se existir
        if 'Observa√ß√µes F√©rias' in self.planilha_final.columns:
            # Mover observa√ß√µes de f√©rias para OBS GERAL
            self.planilha_final['OBS GERAL'] = self.planilha_final['Observa√ß√µes F√©rias'].fillna('')
            # Remover coluna de observa√ß√µes de f√©rias
            self.planilha_final = self.planilha_final.drop('Observa√ß√µes F√©rias', axis=1)
        
        # Reordenar colunas na ordem solicitada
        colunas_ordenadas = [
            'Matricula',
            'Admiss√£o', 
            'Sindicato do Colaborador',
            'Compet√™ncia',
            'Dias',
            'VALOR DI√ÅRIO VR',
            'TOTAL',
            'Custo empresa',
            'Desconto profissional',
            'OBS GERAL'
        ]
        
        self.planilha_final = self.planilha_final[colunas_ordenadas]
        
        # Adicionar coluna de observa√ß√µes
        self.planilha_final['OBS GERAL'] = ''
        
        # Aplicar valida√ß√µes
        self.aplicar_validacoes()
        
        # Salvar planilha
        nome_arquivo = f"VR_MENSAL_{self.mes:02d}_{self.ano}_AUTOMATIZADO.xlsx"
        
        with pd.ExcelWriter(nome_arquivo, engine='openpyxl') as writer:
            self.planilha_final.to_excel(writer, sheet_name='VR Mensal', index=False)
            
            # Criar aba de valida√ß√µes (CORRIGIDO: incluir logs e alertas)
            validacoes_data = []
            
            # Dados b√°sicos
            validacoes_data.extend([
                ['INFORMA√á√ïES B√ÅSICAS', ''],
                ['Per√≠odo de consolida√ß√£o', f"{self.periodo['inicio']} a {self.periodo['fim']}"],
                ['M√™s de compet√™ncia', self.periodo['mes_competencia']],
                ['Dias √∫teis do per√≠odo', self.dias_uteis_periodo],
                ['', ''],
                ['RESUMO DA AUTOMA√á√ÉO', ''],
                ['Total de colaboradores', len(self.planilha_final)],
                ['Total de dias √∫teis', self.planilha_final['Dias'].sum()],
                            ['Valor total VR', f"R$ {self.planilha_final['TOTAL'].sum():,.2f}"],
            ['Custo total empresa', f"R$ {self.planilha_final['Custo empresa'].sum():,.2f}"],
            ['Desconto total profissional', f"R$ {self.planilha_final['Desconto profissional'].sum():,.2f}"],
                ['', ''],
                ['CONTADORES', ''],
                ['Colaboradores com f√©rias', len(self.ferias)],
                ['Colaboradores desligados', len(self.desligados)],
                ['Novas admiss√µes', len(self.admissao_abril)],
                ['', ''],
                ['LOGS DE VALIDA√á√ÉO', ''],
            ])
            
            # Adicionar logs de valida√ß√£o
            for log in self.logs_validacao:
                validacoes_data.append([log, ''])
            
            # Adicionar alertas
            if self.alertas:
                validacoes_data.extend([
                    ['', ''],
                    ['ALERTAS E AVISOS', ''],
                ])
                for alerta in self.alertas:
                    validacoes_data.append([alerta, ''])
            
            # Adicionar valida√ß√µes de dados
            validacoes_data.extend([
                ['', ''],
                ['VALIDA√á√ïES DE DADOS', ''],
                ['Registros com observa√ß√µes', len(self.planilha_final[self.planilha_final['OBS GERAL'] != ''])],
                ['Registros v√°lidos', len(self.planilha_final[self.planilha_final['OBS GERAL'] == ''])],
                ['', ''],
                ['ESTRUTURA DA PLANILHA', ''],
                ['Total de colunas', len(self.planilha_final.columns)],
                ['Colunas implementadas', ', '.join(self.planilha_final.columns.tolist())],
            ])
            
            validacoes = pd.DataFrame(validacoes_data, columns=['Valida√ß√µes', 'Check'])
            validacoes.to_excel(writer, sheet_name='Valida√ß√µes', index=False)
        
        print(f"‚úì Planilha final gerada: {nome_arquivo}")
        return nome_arquivo
    
    def aplicar_validacoes(self):
        """Aplica valida√ß√µes na planilha final"""
        print("Aplicando valida√ß√µes...")
        
        # Validar dados inconsistentes
        for idx, row in self.planilha_final.iterrows():
            obs = []
            
            # Validar matr√≠cula
            if pd.isna(row['Matricula']) or str(row['Matricula']).strip() == '':
                obs.append("Matr√≠cula inv√°lida")
            
            # Validar admiss√£o (pode ser NaT para colaboradores antigos)
            if pd.notna(row['Admiss√£o']):
                try:
                    data_admissao = pd.to_datetime(row['Admiss√£o'])
                    # Validar se a data faz sentido
                    if data_admissao.year < 1900 or data_admissao.year > 2030:
                        obs.append("Data de admiss√£o fora do per√≠odo v√°lido")
                except:
                    obs.append("Formato de data de admiss√£o inv√°lido")
            
            # Validar sindicato
            if pd.isna(row['Sindicato do Colaborador']) or str(row['Sindicato do Colaborador']).strip() == '':
                obs.append("Sindicato n√£o informado")
            
            # Validar compet√™ncia
            if pd.isna(row['Compet√™ncia']) or str(row['Compet√™ncia']).strip() == '':
                obs.append("Compet√™ncia n√£o informada")
            
            # Validar dias √∫teis
            if row['Dias'] < 0 or row['Dias'] > self.dias_uteis_periodo:
                obs.append(f"Dias √∫teis inv√°lidos: {row['Dias']} (m√°x: {self.dias_uteis_periodo})")
            
            # Validar valor di√°rio VR
            if row['VALOR DI√ÅRIO VR'] <= 0:
                obs.append("Valor di√°rio VR deve ser maior que zero")
            
            # Validar valor total
            if row['TOTAL'] < 0:
                obs.append("Valor total VR negativo")
            
            # Validar custo empresa
            if row['Custo empresa'] < 0:
                obs.append("Custo empresa negativo")
            
            # Validar desconto profissional
            if row['Desconto profissional'] < 0:
                obs.append("Desconto profissional negativo")
            
            # Validar propor√ß√£o 80/20
            if abs(row['Custo empresa'] - (row['TOTAL'] * PROPORCAO_EMPRESA)) > 0.01:
                obs.append("Propor√ß√£o empresa/profissional incorreta")
            
            # Validar propor√ß√£o 20%
            if abs(row['Desconto profissional'] - (row['TOTAL'] * PROPORCAO_PROFISSIONAL)) > 0.01:
                obs.append("Propor√ß√£o desconto profissional incorreta")
            
            # Validar consist√™ncia de valores
            if abs(row['TOTAL'] - (row['Dias'] * row['VALOR DI√ÅRIO VR'])) > 0.01:
                obs.append("Inconsist√™ncia: Valor Total ‚â† Dias √ó Valor Di√°rio")
            
            # Adicionar observa√ß√µes
            if obs:
                self.planilha_final.at[idx, 'OBS GERAL'] = '; '.join(obs)
        
        # Valida√ß√µes agregadas
        total_observacoes = len(self.planilha_final[self.planilha_final['OBS GERAL'] != ''])
        if total_observacoes > 0:
            self.alertas.append(f"‚ö†Ô∏è {total_observacoes} registros com observa√ß√µes/valida√ß√µes")
        
        print("‚úì Valida√ß√µes aplicadas")
    
    def executar_automacao(self):
        """Executa todo o processo de automa√ß√£o"""
        print("=" * 60)
        print("INICIANDO AUTOMA√á√ÉO DE VR/VA")
        print("=" * 60)
        
        # Exibir configura√ß√µes do per√≠odo
        print(f"Per√≠odo de consolida√ß√£o: {self.periodo['inicio']} a {self.periodo['fim']}")
        print(f"M√™s de compet√™ncia: {self.periodo['mes_competencia']}")
        print(f"Dias √∫teis calculados: {self.dias_uteis_periodo}")
        print()
        
        # Exibir alertas de per√≠odo de execu√ß√£o
        if self.alertas:
            print("ALERTAS:")
            for alerta in self.alertas:
                print(f"  {alerta}")
            print()
        
        # 1. Carregar dados
        if not self.carregar_dados():
            return False
        
        # 2. Limpar colunas
        self.limpar_colunas()
        
        # 3. Aplicar filtros de exclus√£o
        self.matriculas_excluidas = self.aplicar_filtros_exclusao()
        
        # 4. Calcular dias √∫teis
        self.calcular_dias_uteis_colaborador()
        
        # 5. Calcular valores de VR
        self.calcular_valor_vr()
        
        # 6. Gerar planilha final
        arquivo_final = self.gerar_planilha_final()
        
        # 7. Exibir resumo
        self.exibir_resumo()
        
        print("=" * 60)
        print("AUTOMA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 60)
        
        return True
    
    def exibir_resumo(self):
        """Exibe resumo da automa√ß√£o"""
        print("\n" + "=" * 60)
        print("RESUMO DA AUTOMA√á√ÉO")
        print("=" * 60)
        
        # Informa√ß√µes b√°sicas
        print(f"Per√≠odo de consolida√ß√£o: {self.periodo['inicio']} a {self.periodo['fim']}")
        print(f"M√™s de compet√™ncia: {self.periodo['mes_competencia']}")
        print(f"Dias √∫teis do per√≠odo: {self.dias_uteis_periodo}")
        print()
        
        # Resumo da automa√ß√£o
        total_colaboradores = len(self.base_consolidada)
        total_dias_uteis = self.base_consolidada['DIAS_UTEIS_COLABORADOR'].sum()
        total_vr = self.base_consolidada['VALOR_TOTAL_VR'].sum()
        total_custo_empresa = self.base_consolidada['CUSTO_EMPRESA'].sum()
        total_desconto_profissional = self.base_consolidada['DESCONTO_PROFISSIONAL'].sum()
        
        print(f"Total de colaboradores eleg√≠veis: {total_colaboradores}")
        print(f"Total de dias √∫teis: {total_dias_uteis}")
        print(f"Valor total de VR: R$ {total_vr:,.2f}")
        print(f"Custo total para empresa: R$ {total_custo_empresa:,.2f}")
        print(f"Desconto total profissional: R$ {total_desconto_profissional:,.2f}")
        print()
        
        # Contadores
        print(f"Colaboradores em f√©rias: {len(self.ferias)}")
        print(f"Colaboradores desligados: {len(self.desligados)}")
        print(f"Novas admiss√µes: {len(self.admissao_abril)}")
        print(f"Matr√≠culas exclu√≠das: {len(set(self.matriculas_excluidas))}")
        print()
        
        # Logs de valida√ß√£o
        if self.logs_validacao:
            print("LOGS DE VALIDA√á√ÉO:")
            for log in self.logs_validacao:
                print(f"  {log}")
            print()
        
        # Alertas
        if self.alertas:
            print("ALERTAS E AVISOS:")
            for alerta in self.alertas:
                print(f"  {alerta}")
            print()
        
        # Valida√ß√µes de dados
        if hasattr(self, 'planilha_final'):
            registros_com_obs = len(self.planilha_final[self.planilha_final['OBS GERAL'] != ''])
            registros_validos = len(self.planilha_final[self.planilha_final['OBS GERAL'] == ''])
            
            print(f"Registros com observa√ß√µes: {registros_com_obs}")
            print(f"Registros v√°lidos: {registros_validos}")
            print()
            
            # Mostrar estat√≠sticas dos novos campos
            if 'Dias' in self.planilha_final.columns:
                total_dias = self.planilha_final['Dias'].sum()
                print(f"Total de dias √∫teis: {total_dias}")
            
            if 'TOTAL' in self.planilha_final.columns:
                total_vr = self.planilha_final['TOTAL'].sum()
                print(f"Valor total de VR: R$ {total_vr:,.2f}")
            
            if 'Custo empresa' in self.planilha_final.columns:
                total_custo = self.planilha_final['Custo empresa'].sum()
                print(f"Custo total para empresa: R$ {total_custo:,.2f}")
            
            if 'Desconto profissional' in self.planilha_final.columns:
                total_desconto = self.planilha_final['Desconto profissional'].sum()
                print(f"Desconto total profissional: R$ {total_desconto:,.2f}")
        
        print("=" * 60)

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("AUTOMA√á√ÉO DE VR/VA - SISTEMA CORRIGIDO")
    print("=" * 60)
    
    # Permitir per√≠odo personalizado
    print("Configura√ß√µes atuais:")
    print(f"  Per√≠odo padr√£o: {PERIODO_REFERENCIA['inicio']} a {PERIODO_REFERENCIA['fim']}")
    print(f"  M√™s compet√™ncia: {PERIODO_REFERENCIA['mes_competencia']}")
    print()
    
    # Perguntar se deseja usar per√≠odo personalizado
    resposta = input("Deseja usar per√≠odo personalizado? (s/n): ").lower().strip()
    
    if resposta in ['s', 'sim', 'y', 'yes']:
        print("\nDigite o per√≠odo personalizado:")
        inicio = input(f"Data in√≠cio (formato DD/MM/AAAA, padr√£o {PERIODO_REFERENCIA['inicio']}): ").strip()
        if not inicio:
            inicio = PERIODO_REFERENCIA['inicio']
        
        fim = input(f"Data fim (formato DD/MM/AAAA, padr√£o {PERIODO_REFERENCIA['fim']}): ").strip()
        if not fim:
            fim = PERIODO_REFERENCIA['fim']
        
        mes_comp = input(f"M√™s compet√™ncia (formato MM/AAAA, padr√£o {PERIODO_REFERENCIA['mes_competencia']}): ").strip()
        if not mes_comp:
            mes_comp = PERIODO_REFERENCIA['mes_competencia']
        
        # Extrair ano e m√™s do m√™s de compet√™ncia
        try:
            mes, ano = mes_comp.split('/')
            periodo_personalizado = {
                'inicio': inicio,
                'fim': fim,
                'mes_competencia': mes_comp,
                'ano': int(ano),
                'mes': int(mes)
            }
        except:
            print("Formato inv√°lido. Usando per√≠odo padr√£o.")
            periodo_personalizado = None
    else:
        periodo_personalizado = None
    
    # Criar inst√¢ncia da automa√ß√£o
    try:
        automacao = AutomacaoVR(periodo_personalizado)
        sucesso = automacao.executar_automacao()
        
        if sucesso:
            print("\n‚úì Automa√ß√£o executada com sucesso!")
            print("‚úì Verifique o arquivo gerado na pasta do projeto")
            
            # Exibir resumo final
            if hasattr(automacao, 'planilha_final'):
                print(f"\nüìä RESUMO FINAL:")
                print(f"  Arquivo gerado: VR_MENSAL_{automacao.mes:02d}_{automacao.ano}_AUTOMATIZADO.xlsx")
                print(f"  Total colaboradores: {len(automacao.planilha_final)}")
                print(f"  Total VR: R$ {automacao.planilha_final['TOTAL'].sum():,.2f}")
        else:
            print("\n‚úó Erro na execu√ß√£o da automa√ß√£o")
            
    except Exception as e:
        print(f"\n‚úó Erro cr√≠tico: {e}")
        print("Verifique as configura√ß√µes e tente novamente")

if __name__ == "__main__":
    main() 