#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste para validar as corre√ß√µes implementadas
"""

import pandas as pd
import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio atual ao path para importar a automa√ß√£o
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def testar_correcao_valores_sindicato():
    """Testa a corre√ß√£o dos valores por sindicato"""
    print("=" * 60)
    print("TESTANDO CORRE√á√ÉO: Valores por Sindicato")
    print("=" * 60)
    
    try:
        # Importar a automa√ß√£o com configura√ß√µes de teste
        from automacao_vr import AutomacaoVR
        
        # Criar inst√¢ncia da automa√ß√£o
        automacao = AutomacaoVR()
        
        # Carregar dados
        if not automacao.carregar_dados():
            print("‚ùå Falha ao carregar dados")
            return False
        
        # Limpar colunas
        automacao.limpar_colunas()
        
        # Aplicar filtros de exclus√£o
        automacao.aplicar_filtros_exclusao()
        
        # Calcular dias √∫teis
        automacao.calcular_dias_uteis_colaborador()
        
        # Calcular valores de VR (CORRE√á√ÉO TESTADA)
        automacao.calcular_valor_vr()
        
        # Verificar se os valores foram aplicados corretamente
        valores_unicos = automacao.base_consolidada['VALOR_DIARIO_VR'].unique()
        print(f"Valores √∫nicos aplicados: {valores_unicos}")
        
        # Verificar se h√° mais de um valor (corre√ß√£o funcionando)
        if len(valores_unicos) > 1:
            print("‚úÖ CORRE√á√ÉO FUNCIONANDO: M√∫ltiplos valores por sindicato aplicados")
            
            # Mostrar distribui√ß√£o dos valores
            distribuicao = automacao.base_consolidada['VALOR_DIARIO_VR'].value_counts().sort_index()
            print("Distribui√ß√£o dos valores:")
            for valor, quantidade in distribuicao.items():
                print(f"  R$ {valor:.2f}: {quantidade} colaboradores")
            
            return True
        else:
            print("‚ùå CORRE√á√ÉO N√ÉO FUNCIONOU: Ainda h√° apenas um valor √∫nico")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def testar_correcao_bloqueio_periodo():
    """Testa a corre√ß√£o do bloqueio fora do per√≠odo"""
    print("\n" + "=" * 60)
    print("TESTANDO CORRE√á√ÉO: Bloqueio Fora do Per√≠odo")
    print("=" * 60)
    
    try:
        # Importar configura√ß√µes de teste
        from config_teste_correcoes import EXECUCAO
        
        # Verificar se o bloqueio est√° ativo
        if EXECUCAO['bloquear_execucao_fora_periodo']:
            print("‚úÖ Configura√ß√£o de bloqueio ativa")
            
            # Simular execu√ß√£o fora do per√≠odo
            hoje = datetime.now()
            dia_atual = hoje.day
            
            if dia_atual < EXECUCAO['periodo_execucao_inicio'] or dia_atual > EXECUCAO['periodo_execucao_fim']:
                print(f"‚ö†Ô∏è Executando fora do per√≠odo recomendado (dia {dia_atual})")
                print("‚úÖ Bloqueio deve ser ativado na pr√≥xima execu√ß√£o")
                return True
            else:
                print(f"‚úÖ Executando no per√≠odo recomendado (dia {dia_atual})")
                print("‚ÑπÔ∏è Para testar o bloqueio, execute fora do per√≠odo 1-10")
                return True
        else:
            print("‚ùå Configura√ß√£o de bloqueio n√£o est√° ativa")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def testar_correcao_ferias_inteligente():
    """Testa a corre√ß√£o da estrat√©gia inteligente de f√©rias"""
    print("\n" + "=" * 60)
    print("TESTANDO CORRE√á√ÉO: Estrat√©gia Inteligente de F√©rias")
    print("=" * 60)
    
    try:
        # Importar a automa√ß√£o
        from automacao_vr import AutomacaoVR
        
        # Criar inst√¢ncia da automa√ß√£o
        automacao = AutomacaoVR()
        
        # Carregar dados
        if not automacao.carregar_dados():
            print("‚ùå Falha ao carregar dados")
            return False
        
        # Limpar colunas
        automacao.limpar_colunas()
        
        # Aplicar filtros de exclus√£o
        automacao.aplicar_filtros_exclusao()
        
        # Calcular dias √∫teis (inclui estrat√©gia inteligente de f√©rias)
        automacao.calcular_dias_uteis_colaborador()
        
        # Verificar se a estrat√©gia foi aplicada
        if hasattr(automacao, 'base_consolidada') and 'OBSERVACOES_FERIAS' in automacao.base_consolidada.columns:
            observacoes_ferias = automacao.base_consolidada['OBSERVACOES_FERIAS'].notna().sum()
            print(f"‚úÖ Estrat√©gia inteligente aplicada: {observacoes_ferias} colaboradores com observa√ß√µes de f√©rias")
            
            # Mostrar algumas observa√ß√µes
            obs_nao_vazias = automacao.base_consolidada[automacao.base_consolidada['OBSERVACOES_FERIAS'].notna()]
            if len(obs_nao_vazias) > 0:
                print("Exemplos de observa√ß√µes aplicadas:")
                for idx, row in obs_nao_vazias.head(3).iterrows():
                    print(f"  Matr√≠cula {row['MATRICULA']}: {row['OBSERVACOES_FERIAS']}")
            
            return True
        else:
            print("‚ùå Estrat√©gia inteligente n√£o foi aplicada")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def executar_todos_testes_correcoes():
    """Executa todos os testes das corre√ß√µes"""
    print("üöÄ INICIANDO TESTES DAS CORRE√á√ïES IMPLEMENTADAS")
    print("=" * 60)
    
    testes = [
        ("Valores por Sindicato", testar_correcao_valores_sindicato),
        ("Bloqueio Fora do Per√≠odo", testar_correcao_bloqueio_periodo),
        ("Estrat√©gia Inteligente de F√©rias", testar_correcao_ferias_inteligente)
    ]
    
    resultados = []
    
    for nome, teste in testes:
        try:
            resultado = teste()
            resultados.append((nome, resultado))
        except Exception as e:
            print(f"‚ùå Erro no teste {nome}: {e}")
            resultados.append((nome, False))
    
    # Resumo dos testes
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES DAS CORRE√á√ïES")
    print("=" * 60)
    
    total_testes = len(testes)
    testes_ok = sum(1 for _, resultado in resultados if resultado)
    testes_falharam = total_testes - testes_ok
    
    for nome, resultado in resultados:
        status = "‚úÖ OK" if resultado else "‚ùå FALHOU"
        print(f"{nome}: {status}")
    
    print(f"\nTotal de testes: {total_testes}")
    print(f"Testes OK: {testes_ok}")
    print(f"Testes falharam: {testes_falharam}")
    
    if testes_ok == total_testes:
        print("\nüéâ TODAS AS CORRE√á√ïES EST√ÉO FUNCIONANDO!")
        print("‚úÖ Sistema corrigido e validado")
    else:
        print(f"\n‚ö†Ô∏è {testes_falharam} CORRE√á√ÉO(√ïES) AINDA PRECISAM DE AJUSTES")
        print("üîß Verifique os erros acima")
    
    return testes_ok == total_testes

if __name__ == "__main__":
    executar_todos_testes_correcoes() 